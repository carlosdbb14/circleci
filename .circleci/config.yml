version:
jobs:
  initial: # runs not using Workflows must have a `build` job as entry point
    working_directory: ~/mern-starter # directory where steps will run
    docker: # run the steps with Docker
      - image: circleci/node:10.16.3 # ...with this image as the primary container; this is where all `steps` will run
      - image: mongo:4.2.0 # and this image as the secondary service container
    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache: # special step to restore the dependency cache
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run: # run tests
          name: test
          command: npm test
      - run: # run coverage report
          name: code-coverage
          command: './node_modules/.bin/nyc report --reporter=text-lcov'
      - store_artifacts: # special step to save test results as as artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/ 
          path: test-results.xml
          prefix: tests
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/ 
          path: coverage
          prefix: coverage
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results.xml   
                  
  developdeploy:
    docker:
    - image: circleci/ruby:2.4.1
    steps:
    - checkout
    - add_ssh_keys:
        fingerprints:
        - d7:78:96:12:2d:73:19:01:c2:41:25:5a:2a:f0:28:a8
    - run:
        name: despliegue desarrollo
        command: |
          ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null ubuntu@ec2-100-25-43-172.compute-1.amazonaws.com sudo chmod 777 /var/www/html
          scp -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -r index.html ubuntu@ec2-100-25-43-172.compute-1.amazonaws.com:/var/www/html
          scp -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -r view ubuntu@ec2-100-25-43-172.compute-1.amazonaws.com:/var/www/html
  
  production-deploy1:
    docker:
    - image: circleci/ruby:2.4.1
    steps:
    - checkout
    - add_ssh_keys:
        fingerprints:
        - f3:86:b9:d3:9a:ca:9f:e8:3a:88:83:e2:48:e4:b0:1f
    - run:
        name: despliegue 1
        command: |
          ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null ubuntu@3.15.202.172 sudo chmod 777 /var/www/html
          scp -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -r index.html ubuntu@3.15.202.172:/var/www/html
          scp -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -r view ubuntu@3.15.202.172:/var/www/html

  production-deploy2:
    docker:
    - image: circleci/ruby:2.4.1
    steps:
    - checkout
    - add_ssh_keys:
        fingerprints:
        - f3:86:b9:d3:9a:ca:9f:e8:3a:88:83:e2:48:e4:b0:1f
    - run:
        name: despliegue 1
        command: |
          ssh -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null ubuntu@18.188.143.11 sudo chmod 777 /var/www/html
          scp -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -r index.html ubuntu@18.188.143.11:/var/www/html
          scp -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null -r view ubuntu@18.188.143.11:/var/www/html
         
      
workflows:
  version: 2
  prueba:
    jobs:
    - initial
    - developdeploy:
        requires:
        - initial
    - hold:
        type: approval
        requires:
        - developdeploy
    - production-deploy1:
        requires:
        - hold
    - production-deploy2:
        requires:
        - hold
